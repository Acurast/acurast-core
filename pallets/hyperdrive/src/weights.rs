
//! Autogenerated weights for pallet_acurast_hyperdrive
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm2`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../../acurast-substrate/target/release/acurast-node
// benchmark
// pallet
// --chain=acurast-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_acurast_hyperdrive
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./src/weights.rs
// --template=./src/weights.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_acurast_hyperdrive.
pub trait WeightInfo {
	fn update_state_transmitters() -> Weight;
	fn submit_state_merkle_root() -> Weight;
}

pub struct Weights<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for Weights<T> {
	fn update_state_transmitters() -> Weight {
		// Minimum execution time: 33_241 nanoseconds.
		Weight::from_ref_time(10_000).saturating_add(T::DbWeight::get().reads_writes(1, 2))
	}
	fn submit_state_merkle_root() -> Weight {
		// Minimum execution time: 33_241 nanoseconds.
		Weight::from_ref_time(10_000).saturating_add(T::DbWeight::get().reads_writes(1, 2))
	}
	
}
