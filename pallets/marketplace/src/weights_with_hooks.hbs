{{header ~}}
//! Autogenerated weights for {{pallet}}
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION {{version}}
//! DATE: {{date}}, STEPS: `{{cmd.steps}}`, REPEAT: {{cmd.repeat}}, LOW RANGE: `{{cmd.lowest_range_values}}`, HIGH RANGE: `{{cmd.highest_range_values}}`
//! HOSTNAME: `{{hostname}}`, CPU: `{{cpuname}}`
//! EXECUTION: {{cmd.execution}}, WASM-EXECUTION: {{cmd.wasm_execution}}, CHAIN: {{cmd.chain}}, DB CACHE: {{cmd.db_cache}}

// Executed Command:
{{#each args as |arg|}}
// {{arg}}
{{/each}}

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;
use pallet_acurast;

/// Weights for {{pallet}} using the Substrate node and recommended hardware.
pub struct Weights<T, W>(PhantomData<(T, W)>);
impl<T: frame_system::Config + pallet_acurast::Config, W: pallet_acurast::WeightInfo> pallet_acurast::WeightInfo for Weights<T, W> {
    {{#each benchmarks as |benchmark|}}
    {{#each benchmark.comments as |comment|}}
    // {{comment}}
    {{/each}}
    {{#each benchmark.component_ranges as |range|}}
    /// The range of component `{{range.name}}` is `[{{range.min}}, {{range.max}}]`.
    {{/each}}
    fn {{benchmark.name~}}
    (
        {{~#each benchmark.components as |c| ~}}
        {{~#if (not c.is_used)}}_{{/if}}{{c.name}}: u32, {{/each~}}
    ) -> Weight {
        // Minimum execution time: {{underscore benchmark.min_execution_time}} nanoseconds.
        Weight::from_parts({{underscore benchmark.base_weight}}, 0)
            {{#each benchmark.component_weight as |cw|}}
            // Standard Error: {{underscore cw.error}}
            .saturating_add(Weight::from_parts({{underscore cw.slope}}, 0).saturating_mul({{cw.name}}.into()))
            {{/each}}
            {{#if (ne benchmark.base_reads "0")}}
            .saturating_add(T::DbWeight::get().reads({{benchmark.base_reads}}))
            {{/if}}
            {{#each benchmark.component_reads as |cr|}}
            .saturating_add(T::DbWeight::get().reads(({{cr.slope}}_u64).saturating_mul({{cr.name}}.into())))
            {{/each}}
            {{#if (ne benchmark.base_writes "0")}}
            .saturating_add(T::DbWeight::get().writes({{benchmark.base_writes}}))
            {{/if}}
            {{#each benchmark.component_writes as |cw|}}
            .saturating_add(T::DbWeight::get().writes(({{cw.slope}}_u64).saturating_mul({{cw.name}}.into())))
            {{/each}}
    }
    {{/each}}

    fn update_allowed_sources() -> Weight {
        W::update_allowed_sources()
    }
    fn update_job_assignments() -> Weight {
        W::update_job_assignments()
    }
    fn submit_attestation() -> Weight {
        W::submit_attestation()
    }
    fn update_certificate_revocation_list() -> Weight {
        W::update_certificate_revocation_list()
    }
}
