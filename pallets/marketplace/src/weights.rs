//! Autogenerated weights for pallet_acurast_marketplace
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `smartnuance`, CPU: `Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acurast-dev"), DB CACHE: 1024

// Executed Command:
// ../../../acurast-substrate/target/release/acurast-node
// benchmark
// pallet
// --chain=acurast-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_acurast_marketplace
// --extrinsic
// advertise,delete_advertisement
// --steps=50
// --repeat=20
// --output=./src/weights.rs
// --template=./src/weights.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_acurast_marketplace.
pub trait WeightInfo {
    fn advertise() -> Weight;
    fn delete_advertisement() -> Weight;
    fn propose_matching() -> Weight;
    fn acknowledge_match() -> Weight;
    fn report() -> Weight;
    fn finalize_job() -> Weight;
}

/// Weights for pallet_acurast_marketplace using the Substrate node and recommended hardware.
pub struct Weights<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for Weights<T> {
    // Storage: AcurastMarketplace StoredAdvertisement (r:1 w:1)
    // Storage: AcurastMarketplace StoredAdIndex (r:1 w:1)
    // Storage: AcurastMarketplace StoredCapacity (r:0 w:1)
    fn advertise() -> Weight {
        // Minimum execution time:  nanoseconds.
        Weight::from_ref_time(118_168_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AcurastMarketplace StoredAdvertisement (r:1 w:1)
    // Storage: AcurastMarketplace StoredAdIndex (r:1 w:1)
    // Storage: AcurastMarketplace StoredCapacity (r:0 w:1)
    fn delete_advertisement() -> Weight {
        // Minimum execution time:  nanoseconds.
        Weight::from_ref_time(129_864_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn propose_matching() -> Weight {
        // Minimum execution time:  nanoseconds.
        Weight::from_ref_time(129_864_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn acknowledge_match() -> Weight {
        // Minimum execution time:  nanoseconds.
        Weight::from_ref_time(129_864_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn report() -> Weight {
        // Minimum execution time:  nanoseconds.
        Weight::from_ref_time(129_864_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn finalize_job() -> Weight {
        // Minimum execution time:  nanoseconds.
        Weight::from_ref_time(129_864_000)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(7))
    }
}
